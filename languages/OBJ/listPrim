FirstPrim
%%%
    public String toString() {
        return "first";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("first: one argument expected");
        Val first = va[0].listNode().val;
        return first;
    }
%%%

RestPrim
%%%
    public String toString() {
        return "rest";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("rest: one argument expected");
        Val rest = va[0].listNode().rest;
        return rest;
    }
%%%

AddListPrim
%%%
    public String toString() {
        return "add";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new PLCCException("add: two arguments expected");
        Val v0 = va[0];
        Val v1 = va[1];
        return v1.listVal().add(v0);
    }
%%%

ShuttlePrim
%%%
    public String toString() {
        return "shuttle";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new PLCCException("shuttle: two arguments expected");
        ListVal lst0 = va[0].listVal();
        ListVal lst1 = va[1].listVal();
        return lst0.shuttle(lst1);
    }
%%%

ReversePrim
%%%
    public String toString() {
        return "reverse";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("reverse: one argument expected");
        ListVal lst0 = va[0].listVal();
        return lst0.reverse();
    }
%%%

AppendPrim
%%%
    public String toString() {
        return "append";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new PLCCException("append: two arguments expected");
        ListVal lst0 = va[0].listVal();
        ListVal lst1 = va[1].listVal();
        return lst0.append(lst1);
    }
%%%

LenPrim
%%%
    public String toString() {
        return "len";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("len: one argument expected");
        ListVal lst = va[0].listVal();
        return new IntVal(lst.len);
    }
%%%

ListpPrim
%%%
    public String toString() {
        return "list?";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("list?: one argument expected");
        return new IntVal(va[0].isList() ? 1 : 0);
    }
%%%

