# Language OBJ
#   Language SET with lists, characters, strings, classes, and objects.
#   Includes comparison primitives '<?', '<=?', '>?', '>=', '<>?', and '=?'
#   for IntVals.



# Lexical specification
skip WHITESPACE '\s+'
skip COMMENT '%.*'
LIT '\d+'
LPAREN '\('
RPAREN '\)'
COMMA ','
ADDOP '\+'
SUBOP '\-'
MULOP '\*'
DIVOP '/'
ADD1OP 'add1'
SUB1OP 'sub1'
ZEROP 'zero\?'
NILP 'nil\?'
LTP '<\?'
LEP '<=\?'
GTP '>\?'
GEP '>=\?'
NEP '<>\?'
EQP '=\?'
LENOP 'len'
LISTP 'list\?'
OBJECTP 'object\?'
CLASSP 'class\?'
FIRSTOP 'first'
RESTOP 'rest'
ADDLISTOP 'add'
SHUTTLEOP 'shuttle'
REVERSEOP 'reverse'
APPENDOP 'append'
IF 'if'
THEN 'then'
ELSE 'else'
LET 'let'
LETREC 'letrec'
DEFINE 'define'
IN 'in'
EQUALS '='
EXIT 'exit'
PROC 'proc'
SET 'set'
CLASS 'class'
EXTENDS 'extends'
STATIC 'static'
FIELD 'field'
METHOD 'method'
END 'end'
EVAL 'eval'
NEW 'new'
NIL 'nil'
DISPLAY 'display'
DISPLAY1 'display#'
NEWLINE 'newline'
PUTC 'putc'
PUTS 'puts'
ERROR 'error'
PERROR 'perror'
AT '@'
ATAT '@@'
DOT '\.'
LBRACE '\{'
RBRACE '\}'
LBRACK '\['
RBRACK '\]'
LANGLE '<'
RANGLE '>'
LLANGLE '!<'
RRANGLE '!>'
BANGAT '!@'
SEMI ';'
CHR "'."
STRNG '\"(\\.|[^\"\\])*\"'
VAR '[A-Za-z\&\?\$][\w\?\&\$]*'
%
# Grammar
<program>:Define ::= DEFINE <VAR> EQUALS <exp>
<program>:Eval   ::= <exp>
<exp>:ExitExp    ::= EXIT
<exp>:LitExp     ::= <LIT>
<exp>:ChrExp     ::= <CHR>
<exp>:StrngExp   ::= <STRNG>
<exp>:VarExp     ::= <VAR>
<exp>:IfExp      ::= IF <exp>testExp THEN <exp>trueExp ELSE <exp>falseExp
<exp>:PrimappExp ::= <prim> LPAREN <rands> RPAREN
<exp>:LetExp     ::= LET <letDecls> IN <exp>
<exp>:LetrecExp  ::= LETREC <letDecls> IN <exp>
<exp>:ProcExp    ::= <proc>
<exp>:AppExp     ::= DOT <exp> LPAREN <rands> RPAREN
<exp>:SeqExp     ::= LBRACE <exp> <seqExps> RBRACE
<exp>:SetExp     ::= SET <loc> <VAR> EQUALS <exp>
<exp>:ListExp    ::= LBRACK <rands> RBRACK
<exp>:ClassExp   ::= <classDecl>
<exp>:NilExp     ::= NIL
<exp>:NewExp     ::= NEW <exp>
<exp>:EnvExp     ::= LANGLE <exp>vExp RANGLE <exp>eExp
<exp>:BangAtExp  ::= BANGAT
<exp>:AtExp      ::= AT
<exp>:AtAtExp    ::= ATAT
<exp>:DisplayExp ::= DISPLAY <exp>
<exp>:Display1Exp  ::= DISPLAY1 <exp>
<exp>:NewlineExp ::= NEWLINE
<exp>:PutcExp    ::= PUTC <exp>
<exp>:PutsExp    ::= PUTS <exp>
# !<obj>msg1(rands1)>msg2(rands2)>msg3(rands3)...!>
# is the same as .<.<.<obj>msg1(rands1)>msg2(rands2)>msg3(rands3) ...
<exp>:EenvExp    ::= LLANGLE <exp> <mangle> RRANGLE
<exp>:ErrorExp   ::= ERROR <exp>
<exp>:PerrorExp  ::= PERROR <STRNG>
<classDecl>      ::= CLASS <ext> <statics> <fields> <methods> END
<mangle>         **= RANGLE <exp> LPAREN <rands> RPAREN
<ext>:Ext1       ::= EXTENDS <exp>
<ext>:Ext0       ::=
<loc>:ObjLoc     ::= LANGLE <exp> RANGLE
<loc>:SimpleLoc  ::=
<statics>        **= STATIC <VAR> EQUALS <exp>
<fields>         **= FIELD <VAR>
<methods>        **= METHOD <VAR> EQUALS <proc>
<seqExps>        **= SEMI <exp>
<proc>           ::= PROC LPAREN <formals> RPAREN <exp>
<formals>        **= <VAR> +COMMA
<letDecls>       **= <VAR> EQUALS <exp>
<rands>          **= <exp> +COMMA
<prim>:AddPrim   ::= ADDOP
<prim>:SubPrim   ::= SUBOP
<prim>:MulPrim   ::= MULOP
<prim>:DivPrim   ::= DIVOP
<prim>:Add1Prim  ::= ADD1OP
<prim>:Sub1Prim  ::= SUB1OP
<prim>:ZeropPrim ::= ZEROP
<prim>:NilpPrim  ::= NILP
<prim>:LTPrim    ::= LTP
<prim>:LEPrim    ::= LEP
<prim>:GTPrim    ::= GTP
<prim>:GEPrim    ::= GEP
<prim>:NEPrim    ::= NEP
<prim>:EQPrim    ::= EQP
<prim>:ObjectpPrim   ::= OBJECTP
<prim>:ClasspPrim    ::= CLASSP
<prim>:ListpPrim     ::= LISTP
<prim>:LenPrim       ::= LENOP
<prim>:FirstPrim     ::= FIRSTOP
<prim>:RestPrim      ::= RESTOP
<prim>:AddListPrim   ::= ADDLISTOP
<prim>:ShuttlePrim   ::= SHUTTLEOP
<prim>:ReversePrim   ::= REVERSEOP
<prim>:AppendPrim    ::= APPENDOP
%
%include code
%include prim
%include envRef
%include val
%include listVal
%include listPrim
%include class
%include ref
