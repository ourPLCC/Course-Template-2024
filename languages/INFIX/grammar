# Language INFIX
#   Language SET with infix expressions

# Lexical specification
skip WHITESPACE '\s+'
skip COMMENT '%.*'
LIT '\d+'
LPAREN '\('
RPAREN '\)'
COMMA ','
ADDOP '\+'
SUBOP '\-'
MULOP '\*'
DIVOP '/'
ADD1OP 'add1'
SUB1OP 'sub1'
ZEROP 'zero\?'
POSP 'pos\?'
IF 'if'
THEN 'then'
ELSE 'else'
ENDIF 'endif'
DEF 'def'
DEFINE 'define'
EQUALS '='
PROC 'proc'
SEMI ';'
LBRACE '\{'
RBRACE '\}'
VAR '[A-Za-z][\w?]*'
%
# Grammar
<program>:Define       ::= DEFINE <VAR> EQUALS <exp> SEMI
<program>:Eval         ::= <exp> SEMI
<exp>                  ::= <term> <terms>
<terms>                **= <prim0> <term>
<term>                 ::= <factor> <factors>
<factors>              **= <prim1> <factor>
<factor>:Prim2Factor   ::= <prim2> <factor>
<factor>:AtomFactor    ::= <atom> <fncalls>
<atom>:LitAtom         ::= <LIT>
<atom>:BlockAtom       ::= <block>
<atom>:ParenAtom       ::= LPAREN <exp> RPAREN
<atom>:IfAtom          ::= IF <exp>testExp THEN <exp>trueExp ELSE <exp>falseExp ENDIF
<atom>:PrimappAtom     ::= <prim> LPAREN <rands> RPAREN
<atom>:VarAtom         ::= <VAR> <assign>
<atom>:ProcAtom        ::= PROC LPAREN <formals> RPAREN <block>
<assign>:Assign0       ::=
<assign>:Assign1       ::= EQUALS <atom>
<fncalls>              **= LPAREN <rands> RPAREN
<formals>              **= <VAR> +COMMA
<block>                ::= LBRACE <blockDecls> <exp> <exps> RBRACE
<exps>                 **= SEMI <exp>
<blockDecls>           **= DEF <VAR> EQUALS <exp> SEMI
<rands>                **= <exp> +COMMA
<prim0>:AddPrim0       ::= ADDOP
<prim0>:SubPrim0       ::= SUBOP
<prim1>:MulPrim1       ::= MULOP
<prim1>:DivPrim1       ::= DIVOP
<prim2>:NegPrim2       ::= SUBOP   # unary minus
<prim>:Add1Prim        ::= ADD1OP
<prim>:Sub1Prim        ::= SUB1OP
<prim>:ZeropPrim       ::= ZEROP
<prim>:PospPrim        ::= POSP
%
%include code
%include envRef
%include prim
%include ref
%include val
