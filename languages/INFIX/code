# class methods

Program
%%%

    public static Env env = Env.initEnv(); // the initial environment

%%%

Define
%%%
    public void $run() {
        String id = var.toString();
        Env env = Program.env;
        Val val = exp.eval(env);
        Binding b = env.lookup(id);
        if (b != null)
            b.ref.setRef(val);
        else
            env.add(new Binding(id, new ValRef(val)));
        System.out.println(id);
    }
%%%

Eval
%%%
    public void $run() {
        System.out.println(exp.eval(Program.env).toString());
    }
%%%

Exp
%%%
    public Val eval(Env env) {
        Val val = term.eval(env);
        return terms.eval(val, env);
    }
%%%

Terms
%%%
    public Val eval(Val val, Env env) {
        Iterator<Prim0> prim0Iterator = prim0List.iterator();
        Iterator<Term> termIterator = termList.iterator();
        while (prim0Iterator.hasNext()) {
            Prim0 prim0 = prim0Iterator.next();
            Term term = termIterator.next();
            val = prim0.apply(val, term.eval(env));
        }
        return val;
    }

%%%

Term
%%%
    public Val eval(Env env) {
        //FIXME -- follow the 'eval' code pattern for Exp, by
        // replacing 'term' with 'factor'
        // and 'terms' with 'factors'
        return Val.zero; // placeholder
    }
%%%

Factors
%%%
    public Val eval(Val val, Env env) {
        //FIXME -- follow the 'eval' code pattern for Terms, by
        // replacing 'term' with 'factor'
        // and 'prim0' with 'prim1', etc.
        return Val.zero; // placeholder
    }
%%%

Factor
%%%
    public abstract Val eval(Env env);
%%%

Prim2Factor
%%%
    public Val eval(Env env) {
        //FIXME -- apply prim2 to the value of the factor
        return Val.zero; // placeholder
    }
%%%

AtomFactor
%%%
    public Val eval(Env env) {
        Val v = atom.eval(env);
        return fncalls.eval(v, env); // make any function calls
    }
%%%

Atom
%%%
    public abstract Val eval(Env env);
%%%

PrimappAtom
%%%
    public Val eval(Env env) {
        // evaluate the terms in the expression list
        // and apply the prim to the array of results
        List<Val> args = rands.evalRands(env);
        Val [] va = Val.toArray(args);
        return prim.apply(va);
    }
%%%

LitAtom
%%%
    public Val eval(Env env) {
        return new IntVal(Integer.parseInt(lit.toString()));
    }
%%%

BlockAtom
%%%
    public Val eval(Env env) {
        return block.eval(env);
    }
%%%

VarAtom
%%%
    public Val eval(Env env) {
        //FIXME -- get the reference bound to the variable
        Ref ref = new ValRef(Val.zero); // placeholder
        return assign.set(ref, env);
    }
%%%

ParenAtom
%%%
    public Val eval(Env env) {
        return exp.eval(env);
    }
%%%

ProcAtom
%%%
    public Val eval(Env env) {
        //FIXME-- return an appropriately constructed ProcVal
        return null; // placeholder
    }
%%%

IfAtom
%%%
    public Val eval(Env env) {
        //FIXME -- duplicate the code for IfExp in Language SET
        return Val.zero; // placeholder
    }
%%%

Assign
%%%
    public abstract Val set(Ref ref, Env env);
%%%

Assign0
%%%
    public Val set(Ref ref, Env env) {
        return ref.deRef();
    }
%%%

Assign1
%%%
    public Val set(Ref ref, Env env) {
        return ref.setRef(atom.eval(env));
    }
%%%

Block
%%%
    public Val eval(Env env) {
        env = blockDecls.addBindings(env);
        Val val = exp.eval(env);
        for (Exp e: exps.expList)
            val = e.eval(env);
        return val;
    }
%%%

Fncalls
%%%
    public Val eval(Val v, Env env) {
        Iterator<Rands> randsIter = randsList.iterator();
        while (randsIter.hasNext()) {
            Rands rands = randsIter.next();
            //FIXME -- evaluate the rands to get a list of args
            List<Val> args = null;
            v = v.apply(args);
        }
        return v;
    }
%%%

Formals:init
%%%
    Env.checkDuplicates(varList, " in proc definition");
%%%

BlockDecls:init
%%%
    Env.checkDuplicates(varList, " in block declarations");
%%%

BlockDecls
%%%
    // add bindings as in LetDecls/addLetrecBindings in Language SET
    public Env addBindings(Env env) {
        if (varList.size() == 0)
            return env; // no need to build a new environment
        //FIXME -- extend env and add the bindings to it
        return env; // placeholder
    }
%%%

Rands
%%%
    // evaluate the individual terms in expList using the given environment
    // and return a List<Val> object
    public List<Val> evalRands(Env env) {
        List<Val> args = new ArrayList<Val>();
        for (Exp e : expList)
            args.add(e.eval(env));
        return args;
    }
%%%
