Val
%%%
    public ListNode listNode() {
        throw new PLCCException(this + ": not a nonempty List");
    }

    public ListVal listVal() {
        throw new PLCCException(this + ": not a List");
    }

    public boolean isList() {
        return false; // only ListVals are true
    }
%%%

ListVal
%%%
public abstract class ListVal extends Val {

    public static final ListVal empty = new ListNull();
    public int len;

    public ListVal add(Val val) {
            return new ListNode(val, this);
    }

    public boolean isList() {
        return true;
    }

    public ListVal listVal() {
        return this;
    }

    // shuttle this list onto dst
    public ListVal shuttle(ListVal dst) {;
        ListVal src = this;
        while (src.isTrue()) {
            ListNode node = src.listNode();
            // dst gets longer, src gets shorter
            dst = new ListNode(node.val, dst);
            src = node.rest;
        }
        return dst;
    }

    // reverse this list
    public ListVal reverse() {
        return shuttle(empty);
    }

    // append this list onto dst
    public ListVal append(ListVal dst) {
        return reverse().shuttle(dst);
    }

    public abstract String toString(String sep);

}
%%%

ListNode
%%%
public class ListNode extends ListVal {

    public Val val;
    public ListVal rest; // the rest of the list

    public ListNode(Val val, ListVal rest) {
        this.val = val;
        this.rest = rest;
        this.len = rest.len+1;
    }

    public ListNode listNode() {
        return this;
    }

    public String toString() {
        return "[" + this.toString("") + "]";
    }

    public String toString(String sep) {
        return sep + val + rest.toString(",");
    }
}
%%%    

ListNull
%%%
public class ListNull extends ListVal {

    public ListNull() {
        this.len = 0;
    }

    public boolean isTrue() {
        return false;
    }

    public String toString() {
        return "[]";
    }

    public String toString(String sep) {
        return "";
    }
}
%%%
