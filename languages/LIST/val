Val

%%%
import java.util.*;

public abstract class Val {

    public static Val [] toArray(List<Val> valList) {
        int n = valList.size();
        return valList.toArray(new Val[n]);
    }

    public Val apply(List<Val> args, Env e) {
        throw new PLCCException("Cannot apply " + this.toString());
    }

    public IntVal intVal() {
        throw new PLCCException(this + ": not an Int");
    }

    public boolean isTrue() {
        // every Val is true except for zero (IntVal(0))
        // and the empty list (ListNull)
        return true;
    }

//Val//
}
%%%

IntVal
%%%
import java.util.*;

public class IntVal extends Val {

    public int val;
    
    public IntVal(String s) {
        val = Integer.parseInt(s);
    }
    
    public IntVal(int v) {
        val = v;
    }

    public IntVal intVal() {
        return this;
    }
    
    public boolean isTrue() {
        return val != 0;
    }
    
    public String toString() {
        return "" + val;
    }

}
%%%

ProcVal
%%%
import java.util.*;

public class ProcVal extends Val {

    public Formals formals;
    public Exp body;
    public Env env;

    public ProcVal(Formals formals, Exp body, Env env) {
        this.formals = formals;
        this.body = body;
        this.env = env;
    }

    public Val apply(List<Val> args, Env e) {
        if (formals.varList.size() != args.size())
            throw new PLCCException("formals/args number mismatch");
        Bindings bindings = new Bindings(formals.varList, args);
        Env nenv = env.extendEnv(bindings);
        return body.eval(nenv);
    }

    public String toString() {
        String ids = "";
        String sep = "";
        for (Token tok: formals.varList) {
            ids += sep+tok.toString();
            sep=",";
        }
        return "proc("+ids+")";
    }
}

%%%

