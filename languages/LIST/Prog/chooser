% O(1) version of pos? predicate
define pos1? = proc(x)
  % if x>0, then (x+1)/x != 0 using Java integer division
  % if x<0, then (x+1)/x = 0 using Java integer division
  % if x=0, then x is not positive
  if x
  then
    if /(add1(x),x)
    then 1
    else 0
  else 0

% O(log(x)) divide by 2 version of pos? predicate
define pos2? = proc(x)
  % if x>0, repeated divisions of x by 2 (possibly none)
  %   will eventually become 1 
  % if x<=0, repeated divisions by 2 will never become 1, and
  %   will eventually become 0
  if x
  then
    if -(x,1)            % compare to 1
    then .pos?(/(x,2))
    else 1
  else 0

% O(x) up/down version of pos? predicate
define pos3? = proc(x)
  % if x<=0, repeated increments (up) of x will eventually become 0
  %    while repeated decrements (dn) of x will never become 0
  % if x>0,  repeated decrements (dn) of x will eventually become 0
  %    while repeated increments (up) of x will never become 0
  letrec
    loop = proc(up, dn)
      if up
      then
        if dn
        then .loop(add1(up), sub1(dn))
        else 1
      else 0
  in
    .loop(x, x)

define pos? = pos3?

define nth = proc(xs, n)
  % xs is a list of integers
  % retrieve the nth smallest element (zero-based) of the list of xs
  % if n<0 or n>=len(xs), return the empty list
  % when n=0, this gives the minimum value in the list
  if xs
  then
    letrec
      try = first(xs)
      pick? = proc(t)
        % true if t<try, alse otherwise
        .pos?(-(try,t))
      select = proc(ys, zs)
        % precondition: all ys < try <=  all zs
        % len(ys) + 1 + len(zs) = len(xs)
        % returns the nth smallest element of xs
        let
          l = len(ys)
        in
          if .pos?(-(l,n))
          then .nth(ys, n)              % l>n, so nth must be in ys
          else
            if .pos?(-(n,l))
            then .nth(zs, sub1(-(n,l))) % l<n, so nth must be in zs
            else try                    % bingo!
    in
      .chooser(pick?, select, rest(xs), [], [])
  else []

define sort = proc(xs)
  % xs is a list of integers
  if xs
  then
    letrec
      pivot = first(xs)
      pick = proc(t)
        % pick t<pivot
        .pos?(-(pivot,t))
      merge = proc(ys, zs)
        % precondition: ys < pivot <= zs
        % returns sorted items in xs
        append(.sort(ys), add(pivot,.sort(zs)))
    in
      .chooser(pick, merge, rest(xs), [], [])
  else []

define chooser = proc(c?, m, xs, ys, zs)
    % c?=pick which things belong to ys (true) and zs (false)
    % m=act on the ys and zs once there are no xs
    % xs=input list
    % ys=things in xs for which p? is true
    % zs=things in xs for which p? is false
    if xs
    then
      let
        x = first(xs)
        xs = rest(xs)
      in
        if .c?(x)
        then .chooser(c?, m, xs, add(x,ys), zs)
        else .chooser(c?, m, xs, ys, add(x,zs))
    else
      .m(ys, zs)
